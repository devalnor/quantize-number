{"version":3,"sources":["quantize-value.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","quantizeValue","val","quantum","_ref","arguments","length","undefined","_ref$cover","cover","remainder","sign","mod","Object","defineProperty","value"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,gBAAZC,UAA0C,gBAAXC,QACxCA,OAAOD,QAAUD,IACQ,kBAAXG,SAAyBA,OAAOC,IAC9CD,UAAWH,GACe,gBAAZC,SACdA,QAAuB,cAAID,IAE3BD,EAAoB,cAAIC,KACvBK,KAAM,WACT,MAAgB,UAAUC,GAKhB,QAASC,GAAoBC,GAG5B,GAAGC,EAAiBD,GACnB,MAAOC,GAAiBD,GAAUP,OAGnC,IAAIC,GAASO,EAAiBD,IAC7BP,WACAS,GAAIF,EACJG,QAAQ,EAUT,OANAL,GAAQE,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOS,QAAS,EAGTT,EAAOD,QAvBf,GAAIQ,KAqCJ,OATAF,GAAoBM,EAAIP,EAGxBC,EAAoBO,EAAIL,EAGxBF,EAAoBQ,EAAI,GAGjBR,EAAoB,KAK/B,SAASL,EAAQD,GAEtB,YAkBA,SAASe,GAAcC,EAAKC,GAC1B,GAAIC,GAAOC,UAAUC,QAAU,GAAsBC,SAAjBF,UAAU,MAAwBA,UAAU,GAE5EG,EAAaJ,EAAKK,MAClBA,EAAuBF,SAAfC,GAA2B,EAAQA,CAE/C,KAAKL,EACH,MAAO,EAET,IAAIO,GAAYR,EAAMC,EAClBQ,EAAOT,GAAO,EAAI,EAAI,GACtBU,EAAMH,GAASC,EAAYP,EAAU,CACzC,OAAOD,GAAMQ,EAAYC,EAAOC,EA5BlCC,OAAOC,eAAe5B,EAAS,cAC7B6B,OAAO,IA8BT7B,EAAAA,WAAkBe","file":"quantize-value.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"quantizeValue\"] = factory();\n\telse\n\t\troot[\"quantizeValue\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t// Quantize a `val` by `quantum`.\n\t// The third parameter is `options`. At the moment, there's only a single\n\t// option, which is `cover`. This is whether the algorithm should be covering\n\t// or fitting.\n\t//\n\t// These examples may help demonstrate the difference between that option:\n\t//\n\t// quantizeValue(7, 5, {cover: false}) === 5\n\t// quantizeValue(7, 5, {cover: true}) === 10\n\t//\n\t// The algorithm is symmetrical about zero, so you can just make every\n\t// number in the above example negative to see how it behaves when negative\n\t// numbers are presented.\n\tfunction quantizeValue(val, quantum) {\n\t  var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t  var _ref$cover = _ref.cover;\n\t  var cover = _ref$cover === undefined ? false : _ref$cover;\n\t\n\t  if (!quantum) {\n\t    return 0;\n\t  }\n\t  var remainder = val % quantum;\n\t  var sign = val >= 0 ? 1 : -1;\n\t  var mod = cover && remainder ? quantum : 0;\n\t  return val - remainder + sign * mod;\n\t};\n\t\n\texports.default = quantizeValue;\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=quantize-value.js.map"],"sourceRoot":"/source/"}